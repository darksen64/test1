Text
소 프트웨 어  시 스템을  제 작하는  최선 의  방법
은  관 심사를  분 리 ( s epar ati on  of  concerns) 하
는  것이다 .  관 심사는  소프 트웨어  시스 템의  
목적을  달성하기  위해  처리해야  하는  구체적
인  요 구사항 이나  고 려사항 을  의미 한다.  관심
사를  분리하 는  최선의  방법은  1 972 년  Da vi d  
Pa rna s가  제시 한  것처 럼  모듈을  생성 하여  
서로  다른  모 듈간에  독립성 을  유지 하는  모
듈화 이다[17].  기존 의  절차 적  프로 그래밍 은  
함수  추상 화를  도입하 였고  객체지 향  프로 그
래밍 은  객체  추상 화를  도 입하여  모듈 화에  이 바지하 였다.
기존의  객체지 향  프로 그래밍  등은  각  모
듈에 서  수 행해야  하는  기본적 이고  대표적
인  관심사 인  핵심  관심 사를  모듈화 하는데  
"매우  효율적이지만,  여러  모듈에  걸치는  속성"
을  지닌  횡단  관심사( c r oss- cuttin g  c onc er n)
를  모 듈화할  수  없다.  아파치  톰캣 을  조사
해  본  결과  XML  파싱 이나  URL  패턴  매
칭과  같은  관심 사는  한  개  내지  두  개의  모
"듈로  구현이  되 지만,  로깅  또는  세션  종료"
등과  같은  관 심사는  그  구현이  많은  모듈 에  
걸 쳐있게  된다.  이것 은  설계 자의  잘못이  아
니고  객체 지향적 인  방법 이  속성 상  여러  모
듈에  걸치 는  횡단  관심사 를  모 듈화할  수  없24 프로 그래밍 언어논 문지  제20 권  제1 호(2006. 9)
(그 림  1)  관심사의  변환는  기 술적인  한계 를  가지 고  있기  때문 이다.
모 듈화할  수  없는  이런  1 0%의  코드가  전
체  유지  보수의  90% 의  어려움 을  주고  있
다는  보고가  있을  정도 로  문제 의  심 각성이  
제기 되고  있다[16].  또한  소 프트웨 어  시스
템이  복잡도 가  점점  더  해  가기  때문 에  이
런  문제 가  해 결되지  않을  경우  소프 트웨어  
업계 는  심각 한  위기의 식을  느끼고  있다 [6].
이런  요구 사항에  부응 하여  여러  해결 책
이  제 시되었 는데  그  중에서  관점지 향  기술
[ 2-4 ]은  가장  주목을  받는  기 술이며  객체
지향 을  이어 가는  다음  단계 의  방법론 으로  
부각 되었다 [1].  제록스 의  팔로  알토  연구 소
의  연구 원이었 던  Gregor  Ki c z al e s 가  199 6년
도에  Aspect -O rie nted  Programm i ng(AOP)
라는  용어 를  만 들었으 며  미국 의  국방고 등연
구소 ( D e f e n c e  Advanced  Res e arc h  Pr oj e c t s  
Agency)의  후원 을  받아  노스 이스턴  대학 의  
Cristina  Rop es  등과  함께  관 점지향  프로
그래 밍을  구현 한  대표 적인  언어 인  AspectJ
를  제 작하여  관점 지향  프 로그래 밍의  확산
에  기 여하였 다.  관 점지향  프로그 래밍은  횡단  
관심 사를  독립 적으로  모 듈화하 여  나중에  
직조 (합성)  과정 을  통하 여  한  개의  시스 템
으로  조립하 는  새로 운  방 법론이 다.  이  논문
은  관 점지향  프로 그래밍 과  이를  지원 하는  
정적 인  언어  As pectJ와  동적인  프레임 워크인  JAsCo를  논의한 다.
이  논문의  구성 은  다음 과  같다.  2장에서  
기존 의  프 로그래 밍  방 법론의  문제점 을  기
술하 고  3장에서  관점 지향  프 로그래 밍  방법
론을  논한다 .  4장 에서  이를  구현 한  대표 적
인  언어인  AspectJ를  소개하 고  5장에서  동
적으 로  구현 한  JA sC o 를  소 개한다 .  6장에
서  적용 분야를  기술 하고  7장 에서  결론을  
맺 는다.
기존의  방법론 을  사 용하면  핵심  관심사
의  모듈화 에는  효율적 이나  횡단  관 심사를  
모 듈화할  수  없다.  설계  시점 에는  횡단  관
심사 도  독 립적인  관심사 로  분리 할  수  있으
나  구현  방법 의  제 약성으 로  인해  구현  시점
에는  한  개의  모듈 에  횡단  관심사 가  혼합
하여  들 어가게  된다 .  (그림  1) 에서  핵심  관
심사 인  비즈니스  로직과  횡단  관심사인  영속
성과  로깅 이  설계  시 점에는  독 립적인  관심
사로  분리 가  되지 만  구현  시점 에는  한  개의  
모듈 에  혼 합하여  들 어가는  것을  보여준 다.
기존의  방법 론의  제약 으로  인하여  2가 지  현
상이  발생 한다.  (그림  1) 에  나타난  것처럼  
한  개의  모듈에  여러  개의  서로  다른  관심
사가  구현되는  현상을  코드  혼합( c o d e  t a ngl i ng)새로 운  프 로그래 밍  패러 다임  - 관점지 향  프로 그래밍   25
이라 고  한다.  또한  여러  개의  모듈 에  동일
한  관 심사가  구현되 어  들어 가는  코드  산재
(code  scattering)  현상 이  생 긴다.  (그림  2)
가  코드  산재  현상 을  보여 주고  있는 데  권한 부
여 ( aut h ori z at i on)  검사  코드가  4개 의  다른  모
듈에  전부  들어가  있는  것을  보여주 고  있다.
관 점지향  기술은  횡단  관심사 를  모듈 화
하기  위해  객 체지향  기술과  절차적  프로그
래밍  기초  위에  새로 운  개념 과  구조 물을  
확장 한  것 이다.  관점 지향  기술을  사용 하여
도  핵심  관심 사는  기존 의  방 법론으 로  구현
한다 .  단지  횡단  관심사 를  관 점지향  기술로  
구현 할  뿐이다 .
애스펙트(aspect)는  두  가지  의미 를  가지
고  있다 .  요구  분석  시점 의  애스펙 트는  횡
단  관심 사( c r o s s - c u t t i n g  c oncern) 의  의미가  
있고  구조물(construct)로  사용될  때는  클
래스(class)와  같이  횡단  관심 사를  구현 하
는  한  개의  모듈 의  의미 를  가지고  있다 .
관 점지향  프로그 래밍을  사용하 여  프로 그
램을  개발하 는  간단 한  과정 은  다음과  같다.
3.1  관심 사  분 해 (decomposition)요구사 항을  분 해하여  핵심  관심사 와  횡
단  관심사 를  찾 아내고  이들을  분리 해  낸다 .
"예를  들어,  비즈니스  로직,  영속성,  로깅  등의  "
관 심사가  있을  때  이  중에 서  비즈니 스  로직
만이  핵심  관심사이고  나머지는  시스템  전체
에서  사용되 는  관 심사로  다른  모듈 들에서 도  
필 요하기  때문 에  횡단  관 심사로  분 류한다 .
3.2  관심 사  구 현 (implementation)
이  단계에 서  각  관 심사( 핵 심  또는  횡단  관
심사  포함) 를  독립적으로  구현한다.  개발자들
"은  비 즈니스  로직 ,  영속 성,  로깅  등을  독립적"
으로  개발한 다.  핵심 관심사 인  비즈니 스  로
직은  클래스로  모듈화하고  횡단  관심사인  영
"속성 ,  로깅  등은  애스 펙트로  모 듈화한 다."
3.3  관심 사  합 성 (reco m position)
"횡단  관심사 (영속성 ,  로깅  등)가  독립적"
으로  구현 되어  있기  때문 에  이를  합성하 는  
과정 이  필 요하다 .  합성 을  하는  과정 을  직조
(weaving)라  하며  이  직조 를  담 당하는  소
프 트웨어 를  직조기 (weav er)라고  한다 .  
(그림  3) 이  Aspe ctJ  컴 파일러 에  의한  관
심사  합성을  보 여주고  있다 .
(그 림  3)  As p e c t J  컴파일러에  의한  애스펙트  직조26 프로 그래밍 언어논 문지  제20 권  제1 호(2006. 9)
"직조는  소스  코드  수준,  바이 트  코드  수준  "
또는  실행  시점에  수행할  수  있다 .  Aspe ctJ
"는  바이트  코드 에  직 조하고 ,  J A sC o는  실행  시"
점에  직 조한다 .
Ja va  언어 에  관점
지향 적인  개념 을  추가하 여  확장 한  대표 적
인  범용 의  언 어이다 .  모든  유효한  Ja va  프
로그 램은  유효 한  Aspe ctJ  프로 그램이  된
다.  Aspe ctJ  컴 파일러 는  Java  바이 트  코드  
명세 를  따르므 로  Java  가 상기계 는  AspectJ
가  생성 하는  클래 스  파일을  실 행한다 .
As pectJ에서  횡단  모듈을  구 현하는 데  동
적  횡단 과  정적  횡단 이  있다 .  동적  횡단은  
핵심  모듈이  실행될  때  새로 운  횡단  모듈
을  실 행하거 나  또는  기존의  코드를  새로운  
코드 로  치 환하여  실행 함으로  시스 템에  횡단  
모듈 을  구현한 다.  4.2절 에  동적  횡단의  예를  
"보인 다.  정적  횡단 은  클래스 ,  인 터페이 스  또"
는  애스펙 트와  같은  정적  구조에  변경 을  직
"조하 는  것이다 .  정적  횡단 의  예로,  기존  클래"
스나  인터페이스에  새로운  멤버  필드나  메서
"드의  추가 ,  또는  컴파일  시점 에  어떤  특정"
한  코드 에  대한  경고 와  오류  등이  있다 .
4.1.  AspectJ의  횡단  요소
As pectJ에서  Java  언어를  확 장하여  만든  
구조물을  횡단요소라고  한다.  이  횡단  요소들
이  횡단  관 심사를  구현하 는데  기초  요소 로  사
용된 다.  횡단  요소 를  차례 대로  설명 한다.
4.1.1.  결합점( j o i n  point)
결 합점은  실제로 는  새로 운  구 조물은  아
"니고 ,  프 로그램  실행  과 정에서  구별  가능 한  지점으로  직조에  의해  횡단  코드가  들어오는  "
지 점이다 .  가능 한  모든  결합점 이  As pectJ
"에서  허용되는  것이  아니고,  허용되는  결합점"
"은  메서드  결합점 ,  생성 자  결 합점,  변수  참"
"조  결 합점,  예외처 리  실행  결합 점,  클래 스  "
"초기 화  결합 점,  객체  초기화  결 합점,  객체  "
"초기 화  이전  결 합점,  그리고  충고  실행  결"
"합 점이다 .  예를  들어 ,  지역  변수 나  제어문  "
등은  결합점 으로  사용 할  수  없다.
4.1.2.  교차점( p o i n t c u t )
교차점 은  결합 점들을  지정하 고  결합 점의  
환경정보(context)를  수집하 는  구조물 이다.  
"예를  들어,  교차점은  메서드  호출을  지정하고  "
메서드가  호출될  때의  대상  객체와  매개변수  
등과  같은  환경 정보를  얻을  수  있다.  
AspectJ에서  제공 하는  교차 점의  종류로  
"결합 점  유형 에  따른  교차 점,  제어  흐름  교"
"차점 ,  어휘  구조 에  근거 한  교 차점,  실행  객"
"체  교차점 ,  매 개변수  교차점 ,  조건  검사  교"
차점  등이  있다 .  (표  1) 에서  결합 점  유형에  
따른  교차점 을  보여준 다.
결합점  유형 교차 점
메서드  실행 execution
메서드  호출 call
생성자  실 행 execution
생성자  호출 call
클래 스  초기화 staticinitializ a tion
필드  읽기  참조 get
필드  쓰기  참조 set
예 외처리 실행 handler
객체  초기화 i nit ializ a t ion
객체  초기 화  이전 preinitialization
충고  실행 a d vic eexecution(표  1)  결합점  유형에  따른  교차점새로 운  프 로그래 밍  패러 다임  - 관점지 향  프로 그래밍   27
4.1.3.  충고( a d v i c e )
충고 는  교차 점에서  지정 한  결합 점에서  
실행 되는  코드이 다.  충고의  내용 은  메서 드
의  내용과  유사 하여  결합점 에  도달 할  때  실
행되 는  로직 을  포 함하고  있다.  충고 는  결합
"점의  실행  이전에(before),  결 합점의  실행  "
"이후 에(af ter),  또는  결합점 을  대체 하여"
(around)  실행 될  수  있다 .
이후  충고 는  3가 지  유형이  있다.  결합점 의  
"정상 적  종료  이후 의  충고,  예외가  발생 된  "
"비정 상적  종료  후의  충고,  그리고  예외  발"
생  여부 와  관계 없이  적용 되는  충고 가  있다 .  대
체  충 고에서  결합점 에  원래  있던  기존  코
"드의  실행 을  변경할  수  있는 데,  즉  기존  코"
"드를  다른  코드로  대 체하거 나,  또는  아예  "
기존  코드 가  실행 되지  않게  할  수도  있다.  
교 차점과  충고는  동적  횡단  규칙 을  형성
한다 .  교 차점은  결합 점을  선택하 고  충고 는  
결 합점에서  실행되는  행위를  제공하여  동적  
횡단 을  완 성한다 .
4.1.4.  타입간의  선언( i n t e r - t y p e  declar ation)
타입간 의  선언은  소프 트웨어  시 스템의  클
"래스,  인터페이스,  그리고  애스펙트에  변화를  "
도입 하는  정적  횡단  명령 이다.  클래 스의  상
속구 조를  변경 할  수도  있고  클래스 에  새로
운  메서 드나  필드 를  추가할  수  있다 .
4.1.5.  컴파일  시점  선언
"컴파 일  시점  선언 은  정적  횡단  명 령으로 ,  "
컴파 일  시점 에  특정 한  코드 의  유형 을  만나
면  컴 파일러 가  경고 나  오류  메시지 를  발생
"할  수  있게  한다 .  예를  들어 ,  시 스템의  어"
떤  부분에  Pers istence  클래스 에  있는  
save()  메서 드를  호출하 면  컴파 일러가  경
고  또는  오류  메시지 를  출력할  수  있다 .4.1.6.  애스펙트( a s p e c t )
클 래스가  Java 에서  모듈화 하는  단위 인  것
처럼  애스펙트는  As p e c t J 에 서  모듈화하는  단
위이다 .  애 스펙트 는  동적  및  정적  횡단과  관
련된  모든  구조 물을  포함 한다.  즉  앞에서  설
"명한  교 차점,  충고,  타 입간의  선언 ,  컴파 일  "
시점  선언  등이  모두  애스펙 트에  정 의된다 .
4.1.7.  고급  기능
복잡한  시스템 을  위하 여  다음 과  같은  고
급  기능 이  제공 된다.
-결 합 점 에  대한  정적  또는  동적  정보 를  
얻기  위한  반사(reflection)  기능
-여 러  개의  애스펙 트가  한  개의  결합 점  
에  적용 될  때  애스펙 트  우선 순위  기능
"-애 스 펙 트  인 스턴스 를  가 상기계 별,  객체"
"별,  제어  흐 름별로  연관시 키는  기능"
-예 외  처리  횡단  관 심사를  모듈화 하는데  
사용 하는  예외  연화  기능(softening)
- 애스 펙트에  특권 을  부여 하는  기능
4.2.  AspectJ의  구현  예
이  절에서  간단한  예를  구현한다.  (예 제  1)
에서  메 시지를  출력 하는  2개 의  메서 드를  가
진  클래스 를  생성 하자.  Me s s a g e  클래스 는  
메서드  두  개 ( 수신자 를  지 정하지  않고  보내
는  메 서드와  특정인에게  메시지를  보내는  메
서드) 를  가지 고  있다 .
이  애스 펙트의  코드 를  살펴 보자.
① 애스 펙트의  선언 은  클래 스  선언 과  유
사하 다.② 애 스펙트 에  정의 된  교차 점  de l i v e r M e s s a ge  
()는  M essage에  있는  메서드  del iver ()
에  대한  모든  호출 을  포착 한다.  교차
점에  있는  와일드 카드  “*”는  반환형 에  
"관 계없이 ,  또한  괄호  안에  있는  와일"
드카 드  “..”는  매 개변수 의  종류 와  개수
"에  관계없 이,  모든  deliv er()  메 서드를  "
포 착한다 .
③ 충고를  정의 한다.  be f o r e ( ) 를  사용 하면  
M essage.del iver ()가  실 행되기  전에  충
고가  실 행된다 .  충고 에서  메시 지  “안 녕
하세요! ” 를  줄을  바꾸지  않고  출 력한다.
이제  클래 스  파일 을  애 스펙트 와  함께  컴
파 일하자 .  As p e c t J  컴파일 러인  aj c 가  (예 제  3)
에  있는  애스펙 트를  직 조 ( w eavi ng) 한  클래
스  파일 을  생 성하려 면  모든  입력  파일 을  함
께  aj c 로  컴파 일해야  한다 .  컴파일 하고  실행
하면  다음과  같은  출력을  보게  된다.
(예제  4)  KoreanS alutati on Aspec t.java  새로 운  프 로그래 밍  패러 다임  - 관점지 향  프로 그래밍   29
이  애 스펙트 의  코드를  살 펴보자 .
① 교차점  sa yT oP e rson 은  두  개의  매개변
수를  취하는  M essg e. del i v er() 를  호출 하
는  결합 점을  포착한 다.  사람  이름  뒤에  
“님 ” 을  붙이려면  매개변수  person 을  사
용해 야  한다.  args() 의  첫  번째  매개 변
수인  p e rson은  메서 드  de liver()의  첫  
번째  매 개변수 가  person으로  들어 오
는  것을  지정한다.  sayT oP erson ( ) 의  매
개변 수  person 은  de l i v e r ( ) 의  첫  번째  매
개변 수와  일치 하여야  한다 .
②출 력 에 서  사람  이름  뒤에  “님 ”을  부
치려 면  deliver()  메서드 의  매개 변수
를  고쳐 서  실 행해야  한다.  be f o r e ( )  충고
를  사용하면  del i ver () 가  실행되기  전에  
"충고 의  코드 가  실행되 고,  deliver()가  "
정작  실행 될  때  매개 변수가  변하 지  않
으므 로  before()  충고를  사용할  수  없
다.  충고 를  받는  메 서드의  매개 변수
를  수정하 기  위해  around( )  충고를  사
용한 다.  around()  충고 는  메서 드의  기
존  환경 을  변경하 여  실행할  수  있다 .
③ A spectJ  키 워드인  p r oceed()는  포착
된  결합 점을  실 행하는  명 령이다 .  메서
드  de liver()의  원래  매개변 수  pers on
을  sayToPerson(pers on)으로  포착 하
여  proce ed()  내에 서  “님 ”을  뒤에  추가
하여  pr oceed( ) 에  넘 겨준다 .  결과 는  변경
된  매개 변수를  가지 고  M e ssag e. d e l i v er( )  
를  실행 하게  된다 .
클래스 를  M a nne r s A s p e c t 와  K o r e a n S a l u ta ti o n -  
A spect 와  함께  컴파일하고  Te s t  클래스를  실
행하 면  다음과  같이  출력이  된다 .>ajc  Message.java  Ma nn ersA sp ec t. ja va
     Korean Sa luta tionAsp ect  Test.java
>java  Test
안녕하세요!  AspectJ 를  배우고  싶으세요?
"안녕하세요!  길동님,  재미있어요?KoreanS alutati on 을  포함한  실행결과"
4.3.  AspectJ의  구조 물의  변환
Aspe ctJ  컴파일 러가  컴 파일하 여  나온  결
과물 은  Java  가 상기계 에서  실 행되어 야  하
기  때문 에  컴파 일된  바이 트  코드는  Java의  
구 조물로  전부  변환 되어야  한다 .  As pectJ  
구 조물이  Ja va의  어떤  구조물 로  변 환되는  
것을  (표  2)에서  보여 주고  있다 .
As pectJ  구조 물 Ja va의  구조 물
애스펙 트 클래 스
충고 한  개  이상의  메서 드
결합 점 변 환될  필요가  없음
"타입간  선언대상  클래 스에  필드 ,  "
메서 드  도입
"컴파일  경고 ,  오류바이트  코드 에  "
변화 가  없음(표  2)  AspectJ  구조물의  변환
앞의  예가  실제  As pe ctJ  컴파일 러에  의해  
컴 파일되 고  직조  되었 을  때  코드가  어떻 게  변
화하는 지를  살펴보 자.  (예 제  3) 에  있는  애스
펙트 는  다음 과  같은  클래 스로  변환 될  수  있다.
(변환된  코드  2)  Message.java  
문장  M a n n er sA spect . asI n s t a n ce. b e f o r e 0 $ aj c( ) ;  
가  S y stem .o ut.prin tl n ( m s g ) ;  앞에  삽 입되어  
있는  것을  확인할  수  있다.  그러나  이것은  이
해를  돕기  위하 여  단지  예로 서  제시 된  것
뿐이 지  실제  코드 가  위와  동일 하게  만들 어  지
는  것은  아니며  더구 나  소스  코드 가  변환되
는  것이  아니 라  바이 트  코드가  변 환된다 .
As pectJ와  같은  정적 인  컴파 일러는  컴파
일  시점 에  모든  것이  고정되 기  때문 에  메
모리  등의  제약 이  있는  소형 의  디바 이스나  
분산  플랫폼 에는  적당하 지  않다 .  반면 에  동
적인  AO P  프 레임워 크는  직조가  프로 그램  
수행  중에  일 어나기  때문에  많은  유 연성을  
제공 한다.
이  장에서  동적 인  프레 임워크 의  하나 인  
JAsC o[13-14]를  소개한 다.  JAsCo의  개념
과  대 부분의  구조 물은  As pectJ와  동일 하
다.  따라 서  큰  차이 를  보이고  있는  것이  런
타임  구조이 므로  이를  설 명하기 로  한다 .  런
타임  구조 는  (그림  4) 에  표 시되어  있다 .실제  JAsCo는  분산  한경 을  지 원하기  위
한  AWE D  시스 템[18]으로  확장되 어  분산  
시 스템의  관점지 향  지원 을  위한  새로운  구
조물 이  추 가되었 고  런타 임  구조 도  변경이  
되 었으나  이에  대한  논의 는  지면 상의  문제
로  생 략한다 .
(그림  4)  JAsCo  런타임  구조
5.1.  연 결자( c o n n e c t o r )
작성된  애스펙 트가  컴파일  시점에  클래
스에  직조 되지  않기  때문 에  JA sC o 는  연결
"자를  도 입하였 다.  이  연결자 는,  결 합점을  "
"가진  클래 스가  수행  중에 ,  애 스펙트 를  활성"
화하 고  클 래스와  연결 되어  애 스펙트 의  충
고가  실제로  수행될  수  있도록  배 치하는  
역할 을  한다 .
5.2.  연결 자  등 록기( c o n n e c t o r  registry)
JA sC o 의  런타 임  구조의  핵심  부분은  연
결자  등 록기이 다.  연결자  등록 기가  등록된  
연 결자와  애스 펙트를  관리 한다.  새로 운  연
결자 가  시스 템  수행  중에  로드되 거나  또는  
"기존 의  연 결자가  제거될  시에,  연결 자  등록"
기는  통보 를  받고  등록된  연결자 와  애스 펙
트를  데이터 베이스 에  자동으 로  수정한 다.
5.3.  핫 스왑( H o t S w a p )
핫스왑 은  애스펙 트가  적용 (직조)되어야  
하는  결합 점에  동 적으로  트랩(trap ) 을  설치새로 운  프 로그래 밍  패러 다임  - 관점지 향  프로 그래밍   31
"한다 .  새로 운  애 스펙트 가  배치 되면,  관련 된  "
결합 점은  실행  중에  트랩을  가진  결 합점과  
즉시  교체 된다.  만약 에  애 스펙트 가  제거 되
"고  어떤  애 스펙트 도  직조될  필요 가  없으 면,  이"
번에 는  원래  바이 트  코드 가  다시  설치 된다.
5.4.  쥬 타 (Jutta)
"쥬타 는  JIT  컴 파일러 로,  애 스펙트 가  수"
행될  수  있도 록  원래  결합점 에  트랩 이  설
치된  대체  결합 점  코드 를  매우  효율 적으로  
생성 해  준다.  
핫 스왑과  쥬타 에  근거 한  JAsCo  런타 임  
직조 기는  동적 인  기능을  유지하 면서  또한  
AspectJ와  같이  정적 으로  컴파 일되는  언어
와  성능 이  거의  비슷 하다[13].
"관 점지향  프 로그래 밍의  적용분야[1,4-7]"
는  아주  작은  시스템 으로부 터  대형  시스템
에  이 르기까 지  매우  넓고  다양 하다.  자원이  
부족 한  작은  시스템 에서는  환경에  따라  변
할  수  있는  동적 인  시 스템을  요구하 기  때
문에  관점지 향  프 로그래 밍의  직조 를  사용
하여  꼭  필요한  기능 만  선 택하여  다양 한  
시스 템을  제 작해서  실행할  수  있다 .  또한  
동적 인  직조 기를  사용하 여  필요 한  시점 에  
필요 한  기능 을  직 조하여  사용하 고  필요 없
는  시점 에  제 거하는  방법으 로  자원 의  부족
에  효율 적으로  대체 할  수  있다 .
대형  시스템 에서는  IBM의  We bsph ere의  
"적용  사례[1,6]에서  보듯이 ,  대 용량의  횡단  "
관심 사인  EJ B  컴 포넌트 를  성공 적으로  리
팩토 링하였 다.  이는  개발과  유지 보수가  더
욱  어 려워지 는  복잡 한  소 프트웨 어  시스 템
을  관심 사  별로  독립 적으로  설계  및  구현
"하여  개발과  유지  보수 에  노력 이  현 저하게  줄 어들고 ,  또한  고객 에게  제품 을  납품 할  때  "
고객 이  필요 한  기능 만  선 택하여  직조할  수  
있어  고객 의  다양 한  요구 에  부응 할  수  있
다.  IBM의  성 공적인  사례는  관점 지향  프로
그램 의  혜택 이  약속 이  아니 고  현 실이란  것
을  입 증하고  있다 [ 1 ] .
[4]에서  구체적 으로  개발하 여  제시 된  관
점지 향  프 로그래 밍의  적용  가능 한  분야는  
"로깅 ,  트 레이싱 ,  프 로파일 링,  정책  준 수 ( pol i c y  "
"enforcement),  자원  풀링(pooling),  설계  패"
"턴,  이디 엄,  스레드  안전 ,  인증 ,  권한 부여,  트"
"랜잭션  관리 ,  비 즈니스  규 칙이며  그  외에  성"
"능[ 7],  미들웨 어  리 팩토링 [5,6]  등  다양 하다."
우리는  이  논 문에서  관점지 향  프 로그래
밍의  개념 과  구조물  그리 고  이를  구현 한  대
표적인  정적 인  언어 인  A spectJ와  이를  동적
으로  구현한  JAsCo를  논의하 였다.
관점지 향  프로 그래밍 은  기존 의  프로 그래
밍  방법론 에서  해 결하지  못하였 던  횡단  관
심사 의  모 듈화를  하기  위해  프로 그램에  여
러  구조물 을  도입 하였고  나중에  별도로  구
현된  관심 사를  직조 를  통해  완성 된  소프 트
웨어  시스템을  제작하는  새로운  방법론의  시
작을  열었 으며  많은  분야 에  적용 되어  가고  
있다 .  관점지 향  프 로그래 밍을  사용하 면  고
"도의  모듈 화를  이 루며,  시스 템의  개선 이  용"
"이 하고,  과잉  설계를  피하며 ,  코드  재사 용을  "
확 대하는  등  많은  혜택을  얻을  수  있다.
관점  지향  프 로그래 밍은  객 체지향  다음  
"단계 의  프 로그래 밍  언어 의  발전  단계로 ,  이"
미  많은  연구가  관점지 향  학 회 [15]를  중심으
로  진행 되고  있으며  앞으 로  더욱  발전 이  기
대 된다.  현재  관점지 향  모델링[10-12]에도  
많은  관심과  연구 가  이루 어지고  있다 .32 프로 그래밍 언어논 문지  제20 권  제1 호(2006. 9)
